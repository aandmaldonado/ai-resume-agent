#!/usr/bin/env python3
"""
üîç VERIFICACI√ìN DE CHUNKS - Vector Store
Script para verificar qu√© chunks est√°n disponibles en el vector store
"""

import asyncio
import os
import sys
from pathlib import Path

# A√±adir el directorio del proyecto al path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# Cargar variables de entorno desde archivo .env
from dotenv import load_dotenv
load_dotenv()

from app.services.rag_service import RAGService

async def verify_chunks():
    """Verificar qu√© chunks est√°n disponibles"""
    print("üîç VERIFICACI√ìN DE CHUNKS EN VECTOR STORE")
    print("=" * 60)
    
    try:
        # Inicializar RAG Service
        print("üîÑ Inicializando RAG Service...")
        rag_service = RAGService()
        print("‚úÖ RAG Service inicializado")
        
        # Lista de preguntas para verificar diferentes categor√≠as
        test_questions = [
            ("¬øCu√°l es tu formaci√≥n acad√©mica?", "education"),
            ("¬øQu√© idiomas manejas?", "languages"),
            ("¬øCu√°l es tu motivaci√≥n profesional?", "philosophy_and_interests"),
            ("¬øQu√© proyectos de IA has liderado?", "projects"),
            ("¬øCu√°les son tus expectativas salariales?", "professional_conditions"),
            ("¬øCu√°l es tu experiencia con Java?", "skills_showcase"),
            ("¬øQui√©n eres?", "personal_info"),
        ]
        
        print(f"\nüß™ Verificando {len(test_questions)} categor√≠as...")
        
        for question, expected_category in test_questions:
            print(f"\nüìã Pregunta: '{question}'")
            print(f"üéØ Categor√≠a esperada: {expected_category}")
            
            # Obtener contexto relevante
            retriever = rag_service.vector_store.as_retriever(
                search_kwargs={"k": 5}
            )
            docs = retriever.get_relevant_documents(question)
            
            print(f"üìö Chunks encontrados: {len(docs)}")
            
            if docs:
                for i, doc in enumerate(docs[:3]):  # Mostrar solo los primeros 3
                    source = doc.metadata.get("source", "unknown")
                    preview = doc.page_content[:100] + "..." if len(doc.page_content) > 100 else doc.page_content
                    print(f"   {i+1}. Source: {source}")
                    print(f"      Preview: {preview}")
            else:
                print("   ‚ùå No se encontraron chunks")
            
            print("-" * 40)
        
        print("\n‚úÖ Verificaci√≥n completada")
        
    except Exception as e:
        print(f"‚ùå Error en verificaci√≥n: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(verify_chunks())
