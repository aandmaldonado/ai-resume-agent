"""simplify_contact_form_add_linkedin_remove_company_role

Revision ID: 9627c905e179
Revises: 003_add_conversation_pairs
Create Date: 2025-10-21 16:09:51.201866

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '9627c905e179'
down_revision: Union[str, None] = '003_add_conversation_pairs'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('langchain_pg_embedding')
    op.drop_table('langchain_pg_collection')
    op.add_column('chat_sessions', sa.Column('linkedin', sa.String(length=200), nullable=True))
    op.alter_column('chat_sessions', 'user_type',
               existing_type=sa.VARCHAR(length=50),
               comment='Tipo de usuario (cualquier valor permitido)',
               existing_comment='recruiter, client, curious',
               existing_nullable=True)
    op.drop_column('chat_sessions', 'role')
    op.drop_column('chat_sessions', 'company')
    op.alter_column('conversation_pairs', 'sources_used',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               comment='Fuentes utilizadas para generar respuesta',
               existing_nullable=True)
    op.alter_column('conversation_pairs', 'user_language',
               existing_type=sa.VARCHAR(length=10),
               comment='Idioma detectado del usuario: es, en, fr, etc.',
               existing_nullable=True)
    op.alter_column('conversation_pairs', 'bot_language',
               existing_type=sa.VARCHAR(length=10),
               comment='Idioma de la respuesta del bot',
               existing_nullable=True)
    op.alter_column('conversation_pairs', 'topics_mentioned',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               comment='Temas mencionados en la conversación',
               existing_nullable=True)
    op.alter_column('conversation_pairs', 'technologies_detected',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               comment='Tecnologías detectadas en la pregunta',
               existing_nullable=True)
    op.alter_column('conversation_pairs', 'intent_category',
               existing_type=sa.VARCHAR(length=50),
               comment='Categoría de intención: experience, skills, projects, contact',
               existing_nullable=True)
    op.alter_column('conversation_pairs', 'engagement_score',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='Score de engagement de esta conversación',
               existing_nullable=True)
    op.alter_column('gdpr_consents', 'consent_types',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               comment='Tipos de consentimiento: email_storage, conversation_storage, analytics',
               existing_nullable=True)
    op.alter_column('session_analytics', 'intent_categories',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               comment='Categorías de intención: experience, skills, projects',
               existing_comment='experience, skills, projects',
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('session_analytics', 'intent_categories',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               comment='experience, skills, projects',
               existing_comment='Categorías de intención: experience, skills, projects',
               existing_nullable=True)
    op.alter_column('gdpr_consents', 'consent_types',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               comment=None,
               existing_comment='Tipos de consentimiento: email_storage, conversation_storage, analytics',
               existing_nullable=True)
    op.alter_column('conversation_pairs', 'engagement_score',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment=None,
               existing_comment='Score de engagement de esta conversación',
               existing_nullable=True)
    op.alter_column('conversation_pairs', 'intent_category',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='Categoría de intención: experience, skills, projects, contact',
               existing_nullable=True)
    op.alter_column('conversation_pairs', 'technologies_detected',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               comment=None,
               existing_comment='Tecnologías detectadas en la pregunta',
               existing_nullable=True)
    op.alter_column('conversation_pairs', 'topics_mentioned',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               comment=None,
               existing_comment='Temas mencionados en la conversación',
               existing_nullable=True)
    op.alter_column('conversation_pairs', 'bot_language',
               existing_type=sa.VARCHAR(length=10),
               comment=None,
               existing_comment='Idioma de la respuesta del bot',
               existing_nullable=True)
    op.alter_column('conversation_pairs', 'user_language',
               existing_type=sa.VARCHAR(length=10),
               comment=None,
               existing_comment='Idioma detectado del usuario: es, en, fr, etc.',
               existing_nullable=True)
    op.alter_column('conversation_pairs', 'sources_used',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               comment=None,
               existing_comment='Fuentes utilizadas para generar respuesta',
               existing_nullable=True)
    op.add_column('chat_sessions', sa.Column('company', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.add_column('chat_sessions', sa.Column('role', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.alter_column('chat_sessions', 'user_type',
               existing_type=sa.VARCHAR(length=50),
               comment='recruiter, client, curious',
               existing_comment='Tipo de usuario (cualquier valor permitido)',
               existing_nullable=True)
    op.drop_column('chat_sessions', 'linkedin')
    op.create_table('langchain_pg_collection',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('cmetadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('uuid', name='langchain_pg_collection_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('langchain_pg_embedding',
    sa.Column('collection_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('embedding', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('document', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('cmetadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('custom_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['collection_id'], ['langchain_pg_collection.uuid'], name=op.f('langchain_pg_embedding_collection_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uuid', name=op.f('langchain_pg_embedding_pkey'))
    )
    # ### end Alembic commands ###
